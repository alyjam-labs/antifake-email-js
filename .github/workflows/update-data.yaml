name: Update Data and Create Release

on:
  schedule:
    # Run daily at 00:00 UTC
    - cron: "0 0 * * *"
  workflow_dispatch: # Allow manual trigger

permissions:
  contents: write

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Download latest data.json
        run: |
          curl -o json/data.json https://raw.githubusercontent.com/7c/fakefilter/refs/heads/main/json/data_version2.json

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet json/data.json; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in data.json"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in data.json"
          fi

      - name: Configure Git
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and create tag
        if: steps.check_changes.outputs.changes == 'true'
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Bump patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"

          # Update package.json with new version
          npm version $NEW_VERSION --no-git-tag-version

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git add json/data.json package.json
          git commit -m "chore: update data.json to latest version from fakefilter"
          git push origin main

      - name: Create and push tag
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION - Auto-updated data.json"
          git push origin "v$NEW_VERSION"

      - name: Create GitHub Release
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            Automated release with updated data.json from fakefilter repository.

            Changes:
            - Updated data.json to latest version from https://github.com/7c/fakefilter
          draft: false
          prerelease: false
